#include <sstream>
#include <fstream>
#include <iostream>
#include <string.h>

#include <vector>
#include <unordered_map>

const char* DEFAULT_MODEL = "../assets/car.stl";

int32_t cachedArgc = 0;
char argvStorage[1024];
char* cachedArgv[64];

void printHeader()
{
    printf("#pragma once\n\n");
    printf("//AUTOGENERATED FILE WARNING!!!!!\n\n");
    printf("#ifdef __AVR__\n#include <avr/pgmspace.h>\n#endif\n\n");
}

void uncompressed()
{
    std::ifstream sample(cachedArgc > 1 ? cachedArgv[1]: DEFAULT_MODEL);

    printHeader();
    printf("const float PROGMEM obj[] =\n{\n");

    std::vector<float> verts;

    std::string line;
    while(std::getline(sample, line))
    {
        std::istringstream iss(line);
        if(line.find("vertex") != std::string::npos)
        {
            char stlSyntax[32];
            strcpy(stlSyntax, line.c_str());

            char* token = strtok(stlSyntax," ");
            token = strtok (nullptr, " "); //Remove word vertex
            while(token != nullptr)
            {
                verts.push_back(atof(token));
                token = strtok(nullptr, " ");
                verts.push_back(atof(token));
                token = strtok(nullptr, " ");
                verts.push_back(atof(token));
                token = strtok(nullptr, " ");
            }
        }
    }

    printf("    %.2f,\n", (float)verts.size()/3);
    for(std::vector<float>::iterator iter = verts.begin(); iter != verts.end();)
    {
        printf("    %.2f,", *iter++);
        printf("    %.2f,", *iter++);
        printf("    %.2f,\n", *iter++);
    }

    printf("};");
}

void compressed()
{
    std::ifstream sample(cachedArgc > 1 ? cachedArgv[1]: DEFAULT_MODEL);

    printHeader();
    printf("const uint8_t PROGMEM obj[] =\n{\n");

    int32_t ndx = 1; //Save space for size
    std::vector<float> verts;
    std::unordered_map<float, uint8_t> values;

    std::string line;
    while(std::getline(sample, line))
    {
        std::istringstream iss(line);
        if(line.find("vertex") != std::string::npos)
        {
            char stlSyntax[32];
            strcpy(stlSyntax, line.c_str());

            char* token = strtok(stlSyntax," ");
            token = strtok (nullptr, " "); //Remove word vertex
            while(token != nullptr)
            {
                auto result = values.insert(std::make_pair<float, uint8_t>(atof(token), ndx));
                verts.push_back(result.first->second);
                if(result.second) ndx++;
                token = strtok(nullptr, " ");

                result = values.insert(std::make_pair<float, uint8_t>(atof(token), ndx));
                verts.push_back(result.first->second);
                if(result.second) ndx++;
                token = strtok(nullptr, " ");

                result = values.insert(std::make_pair<float, uint8_t>(atof(token), ndx));
                verts.push_back(result.first->second);
                if(result.second) ndx++;
                token = strtok(nullptr, " ");
            }
        }
    }

    for(std::vector<float>::iterator iter = verts.begin(); iter != verts.end();)
    {
        printf("    %.0f,", *iter++);
        printf("    %.0f,", *iter++);
        printf("    %.0f,\n", *iter++);
    }

    printf("};");

    ndx = 1; //Reset past size
    printf("\n\nconst float PROGMEM ndxToValue[] =\n{\n    ");
    printf("%.2f, ", (float)verts.size()/3);
    std::unordered_map<float,uint8_t>::iterator iter = values.begin();
    while(values.size() > 0)
    {
        while(iter->second != ndx)
        {
            iter++;
        }

        printf("%.2f, ", iter->first);
        values.erase(iter);
        iter = values.begin();
        ndx++;
    }

    printf("\n};\n");
}

int main(int argc, char** argv)
{
    cachedArgc = argc;
    char* storagePointer = argvStorage;
    while(argc--)
    {
        cachedArgv[argc] = storagePointer;
        int32_t length = strlen(argv[argc]);
        strcat(storagePointer, argv[argc]);
        storagePointer+=(length+1);
    }

//    uncompressed();
    compressed();
}
